//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/SteeringWheelInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SteeringWheelInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SteeringWheelInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SteeringWheelInputs"",
    ""maps"": [
        {
            ""name"": ""DrivingControls"",
            ""id"": ""200bf6f7-bc4b-48ab-8ba4-38711ff5ede3"",
            ""actions"": [
                {
                    ""name"": ""SteeringWheel"",
                    ""type"": ""Value"",
                    ""id"": ""62bffd6d-8aa5-40a7-b6a2-14a146b8e373"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Accelerator"",
                    ""type"": ""Value"",
                    ""id"": ""8e31ec52-ec27-4a14-8e6a-dfe18a4359de"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Breake"",
                    ""type"": ""Value"",
                    ""id"": ""c21f5548-9db7-4dc1-aa3c-d24e5f41b360"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Clutch"",
                    ""type"": ""Value"",
                    ""id"": ""16a8546a-53f2-466b-b8b5-39b824af0ced"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""07ce96f5-c1c4-42cd-862b-4a1606ec937c"",
                    ""path"": ""<HID::Logitech G920 Driving Force Racing Wheel for Xbox One>/hat/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteeringWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f911ef5-1786-4226-8e90-656bc2976e50"",
                    ""path"": ""<HID::Logitech G920 Driving Force Racing Wheel for Xbox One>/hat/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1db65216-9fcc-4a29-b9af-d0c8e89f2963"",
                    ""path"": ""<HID::Logitech G920 Driving Force Racing Wheel for Xbox One>/rz"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Breake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5245362e-f3bd-4cc2-afde-48038ff8085d"",
                    ""path"": ""<HID::Logitech G920 Driving Force Racing Wheel for Xbox One>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Clutch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GearShifter"",
            ""id"": ""291630b3-eb3f-4eec-98e6-00eb91d15720"",
            ""actions"": [
                {
                    ""name"": ""Gear1"",
                    ""type"": ""Button"",
                    ""id"": ""4b892370-0c69-486a-819b-e9130b015bff"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fd48e869-3f7e-4b3c-9a4e-8fd73670c108"",
                    ""path"": ""<HID::Logitech G920 Driving Force Racing Wheel for Xbox One>/button12"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gear1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DrivingControls
        m_DrivingControls = asset.FindActionMap("DrivingControls", throwIfNotFound: true);
        m_DrivingControls_SteeringWheel = m_DrivingControls.FindAction("SteeringWheel", throwIfNotFound: true);
        m_DrivingControls_Accelerator = m_DrivingControls.FindAction("Accelerator", throwIfNotFound: true);
        m_DrivingControls_Breake = m_DrivingControls.FindAction("Breake", throwIfNotFound: true);
        m_DrivingControls_Clutch = m_DrivingControls.FindAction("Clutch", throwIfNotFound: true);
        // GearShifter
        m_GearShifter = asset.FindActionMap("GearShifter", throwIfNotFound: true);
        m_GearShifter_Gear1 = m_GearShifter.FindAction("Gear1", throwIfNotFound: true);
    }

    ~@SteeringWheelInputs()
    {
        UnityEngine.Debug.Assert(!m_DrivingControls.enabled, "This will cause a leak and performance issues, SteeringWheelInputs.DrivingControls.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_GearShifter.enabled, "This will cause a leak and performance issues, SteeringWheelInputs.GearShifter.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DrivingControls
    private readonly InputActionMap m_DrivingControls;
    private List<IDrivingControlsActions> m_DrivingControlsActionsCallbackInterfaces = new List<IDrivingControlsActions>();
    private readonly InputAction m_DrivingControls_SteeringWheel;
    private readonly InputAction m_DrivingControls_Accelerator;
    private readonly InputAction m_DrivingControls_Breake;
    private readonly InputAction m_DrivingControls_Clutch;
    public struct DrivingControlsActions
    {
        private @SteeringWheelInputs m_Wrapper;
        public DrivingControlsActions(@SteeringWheelInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @SteeringWheel => m_Wrapper.m_DrivingControls_SteeringWheel;
        public InputAction @Accelerator => m_Wrapper.m_DrivingControls_Accelerator;
        public InputAction @Breake => m_Wrapper.m_DrivingControls_Breake;
        public InputAction @Clutch => m_Wrapper.m_DrivingControls_Clutch;
        public InputActionMap Get() { return m_Wrapper.m_DrivingControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DrivingControlsActions set) { return set.Get(); }
        public void AddCallbacks(IDrivingControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_DrivingControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DrivingControlsActionsCallbackInterfaces.Add(instance);
            @SteeringWheel.started += instance.OnSteeringWheel;
            @SteeringWheel.performed += instance.OnSteeringWheel;
            @SteeringWheel.canceled += instance.OnSteeringWheel;
            @Accelerator.started += instance.OnAccelerator;
            @Accelerator.performed += instance.OnAccelerator;
            @Accelerator.canceled += instance.OnAccelerator;
            @Breake.started += instance.OnBreake;
            @Breake.performed += instance.OnBreake;
            @Breake.canceled += instance.OnBreake;
            @Clutch.started += instance.OnClutch;
            @Clutch.performed += instance.OnClutch;
            @Clutch.canceled += instance.OnClutch;
        }

        private void UnregisterCallbacks(IDrivingControlsActions instance)
        {
            @SteeringWheel.started -= instance.OnSteeringWheel;
            @SteeringWheel.performed -= instance.OnSteeringWheel;
            @SteeringWheel.canceled -= instance.OnSteeringWheel;
            @Accelerator.started -= instance.OnAccelerator;
            @Accelerator.performed -= instance.OnAccelerator;
            @Accelerator.canceled -= instance.OnAccelerator;
            @Breake.started -= instance.OnBreake;
            @Breake.performed -= instance.OnBreake;
            @Breake.canceled -= instance.OnBreake;
            @Clutch.started -= instance.OnClutch;
            @Clutch.performed -= instance.OnClutch;
            @Clutch.canceled -= instance.OnClutch;
        }

        public void RemoveCallbacks(IDrivingControlsActions instance)
        {
            if (m_Wrapper.m_DrivingControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDrivingControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_DrivingControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DrivingControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DrivingControlsActions @DrivingControls => new DrivingControlsActions(this);

    // GearShifter
    private readonly InputActionMap m_GearShifter;
    private List<IGearShifterActions> m_GearShifterActionsCallbackInterfaces = new List<IGearShifterActions>();
    private readonly InputAction m_GearShifter_Gear1;
    public struct GearShifterActions
    {
        private @SteeringWheelInputs m_Wrapper;
        public GearShifterActions(@SteeringWheelInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Gear1 => m_Wrapper.m_GearShifter_Gear1;
        public InputActionMap Get() { return m_Wrapper.m_GearShifter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GearShifterActions set) { return set.Get(); }
        public void AddCallbacks(IGearShifterActions instance)
        {
            if (instance == null || m_Wrapper.m_GearShifterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GearShifterActionsCallbackInterfaces.Add(instance);
            @Gear1.started += instance.OnGear1;
            @Gear1.performed += instance.OnGear1;
            @Gear1.canceled += instance.OnGear1;
        }

        private void UnregisterCallbacks(IGearShifterActions instance)
        {
            @Gear1.started -= instance.OnGear1;
            @Gear1.performed -= instance.OnGear1;
            @Gear1.canceled -= instance.OnGear1;
        }

        public void RemoveCallbacks(IGearShifterActions instance)
        {
            if (m_Wrapper.m_GearShifterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGearShifterActions instance)
        {
            foreach (var item in m_Wrapper.m_GearShifterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GearShifterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GearShifterActions @GearShifter => new GearShifterActions(this);
    public interface IDrivingControlsActions
    {
        void OnSteeringWheel(InputAction.CallbackContext context);
        void OnAccelerator(InputAction.CallbackContext context);
        void OnBreake(InputAction.CallbackContext context);
        void OnClutch(InputAction.CallbackContext context);
    }
    public interface IGearShifterActions
    {
        void OnGear1(InputAction.CallbackContext context);
    }
}
