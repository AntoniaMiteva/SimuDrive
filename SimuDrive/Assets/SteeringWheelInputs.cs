//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/SteeringWheelInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SteeringWheelInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SteeringWheelInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SteeringWheelInputs"",
    ""maps"": [
        {
            ""name"": ""DrivingControls"",
            ""id"": ""200bf6f7-bc4b-48ab-8ba4-38711ff5ede3"",
            ""actions"": [
                {
                    ""name"": ""Steering"",
                    ""type"": ""Value"",
                    ""id"": ""6612a484-fa56-4ebd-88f2-0fadd540bc10"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Throttle"",
                    ""type"": ""Value"",
                    ""id"": ""957b0b2a-9bc5-4ad3-bbf3-8d59933928ab"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Break"",
                    ""type"": ""Value"",
                    ""id"": ""358c7cf8-e675-4f4a-9034-2f562a226ed9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1b872632-573a-4cb0-af0e-0b95430da8f1"",
                    ""path"": ""<Joystick>/stick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a967cd50-28b5-4f9b-b24e-3393ce5d536f"",
                    ""path"": ""<Joystick>/stick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""821831a8-1e15-4264-867b-7af574dbdd3f"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DrivingControls
        m_DrivingControls = asset.FindActionMap("DrivingControls", throwIfNotFound: true);
        m_DrivingControls_Steering = m_DrivingControls.FindAction("Steering", throwIfNotFound: true);
        m_DrivingControls_Throttle = m_DrivingControls.FindAction("Throttle", throwIfNotFound: true);
        m_DrivingControls_Break = m_DrivingControls.FindAction("Break", throwIfNotFound: true);
    }

    ~@SteeringWheelInputs()
    {
        UnityEngine.Debug.Assert(!m_DrivingControls.enabled, "This will cause a leak and performance issues, SteeringWheelInputs.DrivingControls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DrivingControls
    private readonly InputActionMap m_DrivingControls;
    private List<IDrivingControlsActions> m_DrivingControlsActionsCallbackInterfaces = new List<IDrivingControlsActions>();
    private readonly InputAction m_DrivingControls_Steering;
    private readonly InputAction m_DrivingControls_Throttle;
    private readonly InputAction m_DrivingControls_Break;
    public struct DrivingControlsActions
    {
        private @SteeringWheelInputs m_Wrapper;
        public DrivingControlsActions(@SteeringWheelInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Steering => m_Wrapper.m_DrivingControls_Steering;
        public InputAction @Throttle => m_Wrapper.m_DrivingControls_Throttle;
        public InputAction @Break => m_Wrapper.m_DrivingControls_Break;
        public InputActionMap Get() { return m_Wrapper.m_DrivingControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DrivingControlsActions set) { return set.Get(); }
        public void AddCallbacks(IDrivingControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_DrivingControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DrivingControlsActionsCallbackInterfaces.Add(instance);
            @Steering.started += instance.OnSteering;
            @Steering.performed += instance.OnSteering;
            @Steering.canceled += instance.OnSteering;
            @Throttle.started += instance.OnThrottle;
            @Throttle.performed += instance.OnThrottle;
            @Throttle.canceled += instance.OnThrottle;
            @Break.started += instance.OnBreak;
            @Break.performed += instance.OnBreak;
            @Break.canceled += instance.OnBreak;
        }

        private void UnregisterCallbacks(IDrivingControlsActions instance)
        {
            @Steering.started -= instance.OnSteering;
            @Steering.performed -= instance.OnSteering;
            @Steering.canceled -= instance.OnSteering;
            @Throttle.started -= instance.OnThrottle;
            @Throttle.performed -= instance.OnThrottle;
            @Throttle.canceled -= instance.OnThrottle;
            @Break.started -= instance.OnBreak;
            @Break.performed -= instance.OnBreak;
            @Break.canceled -= instance.OnBreak;
        }

        public void RemoveCallbacks(IDrivingControlsActions instance)
        {
            if (m_Wrapper.m_DrivingControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDrivingControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_DrivingControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DrivingControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DrivingControlsActions @DrivingControls => new DrivingControlsActions(this);
    public interface IDrivingControlsActions
    {
        void OnSteering(InputAction.CallbackContext context);
        void OnThrottle(InputAction.CallbackContext context);
        void OnBreak(InputAction.CallbackContext context);
    }
}
